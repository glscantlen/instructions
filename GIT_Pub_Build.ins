_____________________________________________________________________
These instructions will configure an Apache web server and GIT server.
The servers are running on CentOS/RedHat systems. This instruction
will configure the servers to maintain and publish repositories.

 - install GIT, OpenSSH, and Apache servers
    # ... TBD ....
    # Install servers onto hostname giterdone @ 192.168.0.254
    # add first user "giterdone" as the repository administrator

    - login giterdone and share it's home with everone in it's group
    $ chmod 770 /home/giterdone

    ? IF you are initializing an empty repository for developers
       $ mkdir GLSLinuxDocs.git
       $ cd GLSLinuxDocs.git
       $ git init --bare --shared=group
      ###chown -R giterdone:giterdone ./

    ? ELSE you can recreate another repo as this server repo
       $ cd /home/giterdone
       $ git clone --bare https://github.com/hardkernel/<repository.git> -b <branch>
       $ cd <repository.git>
       $ git config core.sharedRepository group
      ###chown -R giterdone:giterdone ./

    ? IF you want the repository viewable to web users
       $ su -
       $ cd /var/www/html
       $ git clone /home/giterdone/GLSLinuxDocs.git LinuxDocs
       $ chown -R giterdone:giterdone LinuxDocs
       $ chmod 775 LinuxDocs
       $ nano -w /etc/httpd/conf/httpd.conf
         <Directory /var/www/html/LinuxDocs>
             AllowOverride AuthConfig
         </Directory>
       $ /etc/init.d/httpd reload
       $ exit # from root user

       $ nano -w /home/giterdone/GLSLinuxDocs.git/hooks/post-receive
         #!/bin/sh
         GIT_WORK_TREE=/var/www/html/LinuxDocs git checkout -f
         #chgrp -R giterdone /var/www/html/LinuxDocs

       $ chmod +x /home/giterdone/GLSLinuxDocs.git/hooks/post-receive

       $ nano -w /var/www/html/LinuxDocs/.htaccess
         AuthUserFile /etc/httpd/conf/.htpasswd
         AuthGroupFile /dev/null
         AuthName EnterPassword
         AuthType Basic
         require user glscantlen mpayne frankk dbaird


 - Continuing from a development system, NOT the server
 
    - Add the server name to all development systems' /etc/hosts
       $ sudo nano -w /etc/hosts # add/edit entry for giterdone
         192.168.0.254   giterdone

    # ssh to giterdone as the repo admin then login as root, 
      because most web servers should block root ssh
    $ ssh giterdone@giterdone
    $ su -

    - Add this development system's username to the server, the
      repo group, and the secure web pages
       $ useradd glscantlen
         password _________
       $ usermod -a -G giterdone glscantlen
       $ htpasswd -c /etc/httpd/conf/.htpasswd glscantlen
         New password: _________
       # add this username to the "require user" list
       $ nano -w /var/www/html/LinuxDocs/.htaccess
         ...
         require user glscantlen mpayne frankk dbaird
         ...

    ? IF your web server needs to reload with the new user ?
       $ /etc/init.d/httpd reload

    $ exit # from root login
    $ exit # from ssh giterdone

    ? IF you initialized an empty repository for this developer then make
      an initial commit to the empty repository and push to the server.
      See man git-clone, git-add, git-commit, git-push
      ###... TBD ... Install GIT and config global name-email
       # GIT the repo, GLSLinuxDocs, for glscantlen from giterdone.
       $ git clone ssh://glscantlen@giterdone/home/giterdone/GLSLinuxDocs.git
         warning: You appear to have cloned an empty repository.
       $ cd GLSLinuxDocs
       - populate the directory tree with new files  $ cp <MyStuff> ./
       $ git ls-files
       $ git add <MyStuff>
       $ git status
       $ git commit -a -m "initial commit"
       $ git push -u origin master
       $ git branch -a
       $ git remote show origin


 - Open a browser from any development system and enter a published repo URL.
   http://giterdone/LinuxDocs



____________________________
Simplified work-flow for GIT with branch = "master"

 - Make changes to local files and commit them locally
    $ git ls-files
    ? IF you added new files to your local repo
       $ git add <new files>
    ? IF you delated files from your local repo
       $ git rm <deleated files>
    - Show which files were changed and what changed
       $ git status
       $ git diff       # compare working tree to index
       $ git diff HEAD  # compare working tree to last commit
    $ git commit -a -m "message describes your changes"

 ! many local commits can be made before you push to server

 - look for others' changes on the server, branch "master"
    $ git fetch origin master # note others' changes 6f9c8e0..
       * branch            master     -> FETCH_HEAD
         6f9c8e0..4534c41  master     -> origin/master
    $ git log master..origin/master
    $ git diff master origin/master # show what's changed

 $ git status
 
 ? IF "Your branch is behind" and NOT "ahead"; pull others' changes
    $ git pull origin master

 ? ELSE IF "Your branch is ahead" and NOT "behind"; push your changes
    $ git pull origin master

 ? ELSE IF "Your branch is behind" and also "ahead" then merge others'
   changes with yours, fix any conflicts, and push the merger
    $ git merge origin/master

    ? IF merge failed; fix conflicts and commit the fixes
       - Edit the files that conflict
         <<<<<<< HEAD  # shows your previous commits that conflict
         >>>>>>> origin/master # shows changes on the server
       $ git commit -a 
       - go back and try merge again

    $ git push origin master
       ? IF push still fails then changes were probably made while
         you were fixing your conficts. Go back to "git fetch origin"



_______________________________________
Where to check logins on the web server
 $ less /var/log/httpd/access_log
 $ less /var/log/httpd/error_log
 $ less /var/log/httpd/ssl_access_log 
 $ less /var/log/httpd/ssl_error_log
 $ less /var/log/httpd/ssl_request_log 
 $ less /var/log/audit/audit.log 
 $ less /var/log/secure



