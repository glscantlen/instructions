_____________________________________________________

Build a simple media player system for the Odroid-XU3
_____________________________________________________
These procedures were written to be executed on an Ubuntu 14.04 x86 desktop.
With minor modifications they will work on other current Debian systems.
There is no requirement to preform software development on the Odroid-XU3.
The XU3 will not require a previously installed system. The media player
will be installed on a microSD that will boot the Odroid-XU3. It can also
be transfered to the Odroid-XU3 remotely using Android fastboot. Fastboot
requires extra cabling and utilities, see appended instructions:
"Debug Monitor serial console instructions".

 - Open a terminal window. Many of the steps in these instructions
   will be command line entries and can be copy/paste to this
   terminal window. Some of these command line steps will contain
   notes following the '#' symbol. These notes will not effect the
   command and may be included at the terminal entry.

 $ mkdir ~/xu3_mplayer
 $ cd ~/xu3_mplayer

   ___________________________________________
 - Retrieve the latest copy of this instruction
    $ REPO_URL_PATH="https://github.com/glscantlen/instructions/raw/master/Buildroot_XU3_MPlayer"
    $ wget $REPO_URL_PATH/build_xu3_mplayer.ins -O ./build_xu3_mplayer_new.ins

   ___________________________________________
 - Ubuntu's automount should be disabled for these instructions.
    $ gsettings set org.gnome.desktop.media-handling automount false
    ? IF after the installation you wish to reverse this setting:
       $ gsettings set org.gnome.desktop.media-handling automount true


   ___________________________________________
 - Insert the microSD into the desktop system and verify it's device
   path. The path name will be something like "/dev/sdX" or "/dev/mmcX".
   Replace "sdX" in the following instructions with the correct device
   name for your microSD.

   !! CAUTION !! dd can destroy the contents of your desktop filesystem.
      Make sure /dev/sdX is the correct device for the microSD.
    $ sudo partprobe
    $ cat /proc/partitions
    $ DEV_SD=/dev/sdX  # !!! make sure this is your microSD
    $ sudo umount $DEV_SD? # un-mount any mounted microSD partitions


   ___________________________________________
 - Install the Development environment
    $ sudo apt-get install build-essential git ccache xz-utils openssh-server
    ! Following is a temporary fix to Buildroot's mplayer. The mplayer
      package's "configure" erroneously uses the Xorg development files
      on the desktop *HOST* ! Therefore the host will need xorg-dev.
    $ sudo apt-get install xorg-dev

    # Buildroot compatible, external toolchain. Release 2014.09
    $ TOOLCHAIN="gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux"
    $ wget https://releases.linaro.org/14.09/components/toolchain/binaries/$TOOLCHAIN.tar.xz
    $ sudo tar -xvJf $TOOLCHAIN.tar.xz -C /usr        # install toolchain anywhere
    $ ln -s /usr/$TOOLCHAIN ~/xu3_mplayer/linaro-4.9  # link to installed toolchain

    $ export CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf-
    $ ls $CROSS_COMPILE*
    $ export ARCH=arm
    $ CPU_COUNT=$(grep processor /proc/cpuinfo | awk '{count=$NF};END{print count+1}')


   ______________________________________
 - Install bootloaders bl1, bl2, u-boot.bin, and tzsw
   ###DEV_SD=/dev/sdX  # !!! make sure this is your microSD
   ###cd ~/xu3_mplayer

    $ git clone https://github.com/hardkernel/u-boot.git -b odroidxu3-v2012.07
    $ cd u-boot

    ! Notice: There is no Pre-built u-boot.bin with a fastboot that supports this
      partitioning scheme. You must build and install a custom u-boot for fastboot.
    # Note: bootloaders can be re-installed remotely with fastboot if u-boot is
      already installed and running on the odroid.
      See appended instructions below: "Install System Remotely".

    - wipe the front 100M of microSD and restore an msdos MBR
       $ sudo dd if=/dev/zero of=$DEV_SD bs=512 count=200000 conv=noerror,sync
       $ sudo parted $DEV_SD "mklabel msdos"
       ! Note: mklabel alone will erase the non-tabled-partitions (fused blobs)

    ? IF you want to install hardkernel's Pre-built bootloaders onto the microSD
      and you do NOT wish to use fastboot to remotely flash partitions then:
      ###chmod +x sd_fuse/hardkernel/sd_fusing.sh
       $ cd sd_fuse/hardkernel/
       $ sudo ./sd_fusing.sh $DEV_SD

    ? ELSE you can build and install a custom u-boot on the microSD
      and you may use fastboot to remotely flash partitions onto the Odroid:
      ###CPU_COUNT=$(grep processor /proc/cpuinfo | awk '{count=$NF};END{print count+1}')
      ###export CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf-

       # Note commit 300e640c... newer commit will break autoboot interrupt
       $ git checkout 300e640cfdcb7b6a5d1ca829d1f2b81c18f61b10

       # For a faster flash with fastboot, skip erasing the partitions.
         Edit file "cmd_fastboot.c", use 'ctrl-_' to goto aprox. line 597
         also See appendex "Patch u-boot"
       $ nano -w common/cmd_fastboot.c
         ...
            if (0)/*(bl_cnt>>10)*/
         ...

       $ grep -E "Target|odroid" boards.cfg
       $ make odroid_config
       $ make -j$CPU_COUNT

       - Install u-boot to microSD in non-tabled-partitions. Environment was erased with previous wipe
         ###sudo dd seek=1231  of=$DEV_SD  if=/dev/zero count=32 conv=noerror,sync # zero environment
          $ sudo dd seek=1     of=$DEV_SD  if=sd_fuse/hardkernel/bl1.bin.hardkernel
          $ sudo dd seek=31    of=$DEV_SD  if=sd_fuse/hardkernel/bl2.bin.hardkernel
          $ sudo dd seek=63    of=$DEV_SD  if=u-boot.bin
          $ sudo dd seek=719   of=$DEV_SD  if=sd_fuse/hardkernel/tzsw.bin.hardkernel

       # Fastboot requires access to the Odroid as a USB device at its micro USB port.
         Android utilities are installed for fastboot in 2 Ubuntu packages.
       $ sudo apt-get install android-tools-fastboot android-tools-fsutils

       ? IF you want to allow non-sudo access to the Odroid fastboot device
         then add it's USB product/vendor IDs to the udev rules.
          $ grep -E "VENDOR_ID|PRODUCT_ID" drivers/usb/gadget/fastboot.c | grep "#define"
          $ sudo nano /lib/udev/rules.d/70-android-tools-fastboot.rules
            ACTION=="add|change", SUBSYSTEM=="usb", \
              ATTRS{idVendor}=="18d1", ATTRS{idProduct}=="4e30|4e40|4ee0|0002", \
              TAG+="uaccess"
          $ sudo udevadm control --reload-rules
          $ sudo udevadm trigger

    $ sudo sync
    $ cd ~/xu3_mplayer


   __________________________________________
 - Prepare boot and root filesystems for kernel and Buildroot installation
   ###DEV_SD=/dev/sdX  # !!! make sure this is your microSD

    - Create boot and root partitions
      !!! CAUTION !!! dd can destroy the contents of your mounted system disk.
      Make sure DEV_SD is the correct device for the microSD.
       $ sudo parted $DEV_SD "mkpart primary fat32 1572864B 136314879B" # (I)gnore performance warning
       $ sudo parted $DEV_SD "mkpart primary ext4 136314880B -1"
       $ sudo parted $DEV_SD unit B print
         Set these variables to hold reported sizes. We will need them later.
          $ SIZEOF_DEV_SD1=134742016  # this will match the fat32 partition size
          $ SIZEOF_DEV_SD2=____X____  # X=15794700288 for sandisk 16GB

    $ mkdir /tmp/ODROID_BOOT /tmp/ODROID_ROOT

    ? IF you are NOT going to use fastboot for remote installs
      then you will be installing directly onto a local microSD
       $ sudo mkfs.vfat $DEV_SD'1'
       $ sudo mkfs.ext4 -O ^has_journal $DEV_SD'2'
       $ sudo sync
       $ sudo partprobe
       $ cat /proc/partitions
       $ sudo fsck.vfat -fv $DEV_SD'1' # verify fat
       $ sudo fsck.ext4 -fv $DEV_SD'2' # verify ext4 no journal
       $ sudo tune2fs -l $DEV_SD'2' | grep features

       $ sudo mount -t vfat $DEV_SD'1' /tmp/ODROID_BOOT
       $ sudo mount -t ext4 $DEV_SD'2' /tmp/ODROID_ROOT

    ? ELSE you are going to use fastboot to remotely install a system.
      Create virtual file systems to hold boot and root for the remote install.
      The microSD partitioning is complete and it can be inserted into the Odroidxu3
       $ dd if=/dev/zero of=/tmp/VFS_BOOT.img bs=1 count=0 seek=$SIZEOF_DEV_SD1
       $ dd if=/dev/zero of=/tmp/VFS_ROOT.img bs=1 count=0 seek=$SIZEOF_DEV_SD2
       $ mkfs.vfat /tmp/VFS_BOOT.img
       $ mkfs.ext4 -O ^has_journal /tmp/VFS_ROOT.img
         Warning: Not a block special device. Proceed anyway? (y,n) y
       $ fsck.vfat -fv /tmp/VFS_BOOT.img # verify fat
       $ fsck.ext4 -fv /tmp/VFS_ROOT.img # verify ext4 no journal
       $ tune2fs -l /tmp/VFS_ROOT.img | grep features

       $ sudo mount -t vfat -o loop /tmp/VFS_BOOT.img /tmp/ODROID_BOOT
       $ sudo mount -t ext4 -o loop /tmp/VFS_ROOT.img /tmp/ODROID_ROOT


   __________________________________
 - Build & Install the kernel
   ###CPU_COUNT=$(grep processor /proc/cpuinfo | awk '{count=$NF};END{print count+1}')
   ###export ARCH=arm
   ###export CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf-
   ###sudo mount ____$DEV_SD'1'___OR___-o loop /tmp/VFS_BOOT.img____ /tmp/ODROID_BOOT
   ###cd ~/xu3_mplayer

    - GIT the kernel source and build
       $ git clone --single-branch https://github.com/hardkernel/linux.git -b odroidxu3-3.10.y
       $ cd linux

       # Note commit ee1b001... newer commits appear to have timming issues
         with mplayer. Sometimes cause lock-up when <ESC>ing out of mplayer
       $ git checkout ee1b0014142ad679f936318b412feb4832636d7a

       $ make odroidxu3_defconfig
       $ make -j$CPU_COUNT zImage
       $ make -j$CPU_COUNT modules
       $ make dtbs

    - Install the kernel onto the boot filesystems. Initrd is not used.
      Modules and firmware will be installed onto root in BuildRoot procedures.
       $ sudo cp arch/arm/boot/zImage /tmp/ODROID_BOOT/
       $ sudo cp arch/arm/boot/dts/exynos5422-odroidxu3.dtb /tmp/ODROID_BOOT/

    ? IF you want to download a pre-written boot.ini
       $ wget $REPO_URL_PATH/boot.ini -O /tmp/ODROID_BOOT/boot.ini
    ? ELSE you can add this as your boot.ini
       $ sudo nano -w /tmp/ODROID_BOOT/boot.ini
         ODROIDXU-UBOOT-CONFIG
         #setenv bootdelay "5"
         setenv fdt_high "0xffffffff"
         setenv kconsole "console=ttySAC2,115200n8"
         setenv videoconfig "drm_kms_helper.edid_firmware=edid/1920x1080.bin"
         setenv smsmacaddr "smsc95xx.macaddr=00:1e:06:61:7a:39"
         setenv mmcrootdev "root=/dev/mmcblk0p2 rootwait rw"
         setenv mmcrootfstype "rootfstype=ext4"
         setenv governor "governor=performance"
         #setenv debugdrivers "s5p_mfc.debug=10"
         setenv bootargs "${kconsole} ${mmcrootdev} ${mmcrootfstype} ${videoconfig} ${smsmacaddr} ${governor} ${debugdrivers}"
         setenv bootcmd "fatload mmc 0:1 0x40008000 zImage; fatload mmc 0:1 0x42000000 exynos5422-odroidxu3.dtb; bootz 0x40008000 - 0x42000000"
         boot

    $ sudo sync
    $ cd ~/xu3_mplayer


  _______________________________________________
 - Build & Install BuildRoot system
   ###REPO_URL_PATH="https://github.com/glscantlen/instructions/raw/master/Buildroot_XU3_MPlayer"
   ###CPU_COUNT=$(grep processor /proc/cpuinfo | awk '{count=$NF};END{print count+1}')
   ###sudo mount ____$DEV_SD'2'___OR___-o loop /tmp/VFS_ROOT.img____ /tmp/ODROID_ROOT
   ###cd ~/xu3_mplayer

    $ wget http://git.buildroot.net/buildroot/snapshot/buildroot-2015.05.tar.bz2
    $ tar -xvjf buildroot-2015.05.tar.bz2
    $ cd buildroot-2015.05

    - Add a new video driver package "armsoc" to Buildroot
      This is an X11 driver supporting the OdroidXU3's video hardware.

       # insert a line for the armsoc package into the x11r7/Config.in
         armsoc is added to the "X11R7 Drivers" menu in alphabetic order.
         With nano, use ctrl-W to find "xdriver_xf86-video-ark"
       $ nano -w package/x11r7/Config.in
         ...
         <TAB><TAB>source package/x11r7/xdriver_xf86-video-ark/Config.in
         <TAB><TAB>source package/x11r7/xdriver_xf86-video-armsoc/Config.in
         <TAB><TAB>source package/x11r7/xdriver_xf86-video-ast/Config.in
         ...

       # Armsoc needs defined and required configurations selected.
       $ mkdir package/x11r7/xdriver_xf86-video-armsoc
       $ nano -w package/x11r7/xdriver_xf86-video-armsoc/Config.in
         config BR2_PACKAGE_XDRIVER_XF86_VIDEO_ARMSOC
         <TAB>bool "xf86-video-armsoc"
         <TAB>select BR2_PACKAGE_XPROTO_FONTSPROTO
         <TAB>select BR2_PACKAGE_XPROTO_RANDRPROTO
         <TAB>select BR2_PACKAGE_XPROTO_RENDERPROTO
         <TAB>select BR2_PACKAGE_XPROTO_XEXTPROTO
         <TAB>select BR2_PACKAGE_XPROTO_XPROTO
         <TAB>help
         <TAB>  Odroid XU3 video driver

       # BuildRoot uses '.mk' files to download, configure and build it's packages.
       ? IF you do not have access to REPO_URL_PATH then add armsoc's '.mk' file using
         the appended instructions below "Create ARMSOC xdriver_xf86-video-armsoc.mk"
       ? ELSE you can copy the pre-written .mk file from "instructions/Buildroot_XU3_MPlayer"
          $ wget $REPO_URL_PATH/xdriver_xf86-video-armsoc.mk -O package/x11r7/xdriver_xf86-video-armsoc/xdriver_xf86-video-armsoc.mk


    ? IF you do not have access to REPO_URL_PATH or you just want to configure BuildRoot manully,
      using "make menuconfig", see appended instructions below "BuildRoot Menuconfig from scratch"
    ? ELSE you can copy the pre-made configuration from this repository folder.
       $ wget $REPO_URL_PATH/odroidxu3_mplayer_defconfig -O configs/odroidxu3_mplayer_defconfig
       $ make odroidxu3_mplayer_defconfig
       $ ls $HOME/xu3_mplayer/linaro-4.9/bin


    # To change the default configuration for "eth0' from dynamic to static
      see appended instructions below "BuildRoot Menuconfig" System configuration.
    ? IF you are using DHCP for dynamic IP Address on eth0, The default.
       - ensure Network interface using DHCP is set to 'eth0' and the
         "config_eth" script is NOT used in Custom scripts.
    ? ELSE you are using a static IP. Add this "config_eth" script
       - ensure Network interface using DHCP is NOT set to 'eth0' and the
         "config_eth" script is used in Custom scripts before creating image.
       $ nano -w support/scripts/config_eth
         #! /bin/bash
         echo >> output/target/etc/network/interfaces
         echo "auto eth0" >> output/target/etc/network/interfaces
         echo "iface eth0 inet static" >> output/target/etc/network/interfaces
         echo "address 192.168.0.123" >> output/target/etc/network/interfaces
         echo "netmask 255.255.255.0" >> output/target/etc/network/interfaces
         echo "gateway 192.168.0.1" >> output/target/etc/network/interfaces
         unlink output/target/etc/resolv.conf
         echo "nameserver 8.8.8.8" >> output/target/etc/resolv.conf
       $ chmod +x support/scripts/config_eth


    - Add "Skeleton" files and folders to be merged into the root filesystem.

       # Add a desirable #of ctrl-alt-F# terminals before the getty serial port
       $ nano -w system/skeleton/etc/inittab
         ...
         tty1::respawn:/sbin/getty 38400 tty1
         tty2::respawn:/sbin/getty 38400 tty2
         ...

       # Xorg is configured to use the new armsoc driver with fbdev /dev/fb0
       $ mkdir system/skeleton/etc/X11
       ? IF you do not have access to REPO_URL_PATH or you want to enter the Xorg
         configuration manually. Use the appended instructions: "Edit Xorg configuration"
       ? ELSE you can download a pre-written xorg.conf
          $ wget $REPO_URL_PATH/xorg.conf -O system/skeleton/etc/X11/xorg.conf

       # Youtube-dl is a compressed python script used to access Youtube and other's video files
       $ wget http://yt-dl.org/downloads/2015.06.25/youtube-dl -O system/skeleton/usr/bin/youtube-dl.py.zip
       $ chmod a+rx system/skeleton/usr/bin/youtube-dl.py.zip


    - Build the root file system, install it, and install kernel modules & firmware.
       $ make -j$CPU_COUNT
       $ sudo tar -xvf output/images/rootfs.tar -C /tmp/ODROID_ROOT
       $ sudo make ARCH=arm CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf- INSTALL_MOD_PATH=/tmp/ODROID_ROOT -C ../linux modules_install


    $ sudo sync
    $ cd ~/xu3_mplayer


   _______________________________________________
 - Remote install, cleanup & test
   ###cd ~/xu3_mplayer
    $ sudo umount /tmp/ODROID_?OOT 

    ? IF you are NOT remotely installing root and boot then you have completed the
      installation onto the local microSD. You can boot the Odroid-XU3
      with this microSD and login as root.

    ? ELSE you are installing root and boot remotely with fastboot
      ###sudo apt-get install android-tools-fastboot android-tools-fsutils
       - Start fastboot on the odroid:
          - connect the OdroidXU3 to the development system with
            a microUSB cable and the Debug console cable
          - Open a new terminal for the Debug console and execute miniterm.
             $ sudo miniterm.py --lf /dev/ttyUSB0 -b 115200
          - Continuing in the Debug Console terminal, insert microSD into OdroidXU3.
            Apply power and hold down the space bar, interrupting the bootloader.
          - At the bootloader prompt, "Exynos5422 #", enter "fastboot"
          ! Now continue on the original desktop terminal

       - convert root filesystem to sparse image and remotely install
          $ img2simg /tmp/VFS_ROOT.img /tmp/VFS_ROOT.simg ; ls -alsh /tmp/VFS_ROOT*
          $ sudo fastboot flash system /tmp/VFS_ROOT.simg
          $ sudo fastboot flash fat /tmp/VFS_BOOT.img
          $ sudo fastboot reboot

    ! NOTICE: under some conditions the Odroid will need startup with the POWER button.

    - Login to the Odroid-XU3 as root, no password
      Execute the following (>) on the Odroid: 
       > ping www.comcast.net
       > speaker-test
       > mplayer http://stream-tx1.radioparadise.com/mp3-128
       > mplayer -cache 1024 -playlist http://somafm.com/groovesalad130.pls

       > export DISPLAY=:0.0 ; Xorg & sleep 1 ; twm &
       - using the mouse press and hold the left button then select "Xterm"
         now continue in the Xterm window
       > glxgears
       > es2gears_x11

       ! HINT: you can open a second Xterm window, display this document, and use copy/paste
          > ssh <USER>@<IPADDR>
          > cat ~/xu3_mplayer/build_xu3_mplayer_new.ins
          - use shift-insert to paste selected text into the first Xterm window.

       > wget http://samples.mplayerhq.hu/3D/DSCF1928_fish.AVI
       > wget http://samples.mplayerhq.hu/MPEG-4/video.mp4
       > mplayer DSCF1928_fish.AVI
       > mplayer video.mp4

       > mplayer -cache 8192 http://docs.gstreamer.com/media/sintel_trailer-480p.webm
       > url="http://www.youtube.com/watch?v=gr-mt1P94cQ"
       > youtube-dl.py.zip --no-check-certificate -q -o- $url | mplayer -cache 8192  -
       > url="https://www.youtube.com/watch?v=vJpge3v0DO4"
       > youtube-dl.py.zip --no-check-certificate -q -o- $url | mplayer -fs -cache 16384  -

    - To shutdown the odroid ctrl-alt-F1
      ###kill -TERM $(ps aux | grep Xorg | grep -v grep | awk '{print $1}')
       > killall -TERM Xorg
       > poweroff





___________________________________________________

    TODO list X=done
___________________________________________________

 O Fix the mplayer bug that requires X86 host development files, xorg-dev,
   for the arm build.

 X Instructions for packaging of hello world example code is provided
   in a sibling folder, Buildroot_hello_world.

 X Using gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux binaries.
   This is the latest linaro toolchain that provides libstdc++.so.6.

 X Libmali.so will implement hardware acceleration for libEGL and libGLES.
   Libmali.so also provides OpenCL compute support on the T628 GPU. The
   pre-built binary for libmali.so is available at malideveloper.arm.com.
   See appended instruction below, "Install pre-built libmali.so" 

 O Configure/build/install for libmali.so source. May require special
   licensing. This library supports H/W accelerated graphics for EGL and GLES.
   It also provides OpenCL compute support on the T628 GPU

 O Provide instructions for packaging of GLES2 and EGL example code.

 O Provide instructions for packaging of OpenCL example code.

 O Fix deficient acceleration of GLES code NOT running under Marco window manager.
   Provide test examples with es2gears.





___________________________________________________

    Create ARMSOC xdriver_xf86-video-armsoc.mk
___________________________________________________
Thanks to Legath on the Odroid forum for help with this .mk. Also thanks to
mihailescu2m and mdrjr for providing the armsoc driver sources. Other libraries
for EGL/GLES still need config/built/installed/tested. see "TODO list"
###cd ~/xu3_mplayer/buildroot-2015.05

 ! NOTICE: several versions of this driver code are currently being developed.
   included in this '.mk' are a couple that can be de/selected using the comment (#).
    ? If you change the driver on a re-build you should remove the old driver code.
       $ rm -rf output/build/xdriver_xf86-video-armsoc-1.0.0
       $ rm dl/xdriver_xf86-video-armsoc-1.0.0.tar.gz
         OR
       $ make xdriver_xf86-video-armsoc-dirclean
         AND to re-install
       $ make xdriver_xf86-video-armsoc-reinstall
       $ ls -als output/target/usr/lib/xorg/modules/drivers
       ! You can test this driver on the XU3. Login to the Odroid as root and use scp.
          > scp <USER>@<IPADDR>:~/xu3_mplayer/buildroot-2015.05/output/target/usr/lib/xorg/modules/drivers/armsoc_drv.so  /usr/lib/xorg/modules/drivers/
       # You'll then need to re-create the tar image
       $ ls -als output/images
       $ make -j4

 # Copy/Paste the .mk text as-is, keeping the tabs.
 $ nano -w package/x11r7/xdriver_xf86-video-armsoc/xdriver_xf86-video-armsoc.mk
################################################################################
#
# xdriver_xf86-video-armsoc
#
################################################################################

#XDRIVER_XF86_VIDEO_ARMSOC_VERSION = 1.0.0
#XDRIVER_XF86_VIDEO_ARMSOC_SITE = $(call github,endlessm,xf86-video-armsoc,$(XDRIVER_XF86_VIDEO_ARMSOC_VERSION))
#XDRIVER_XF86_VIDEO_ARMSOC_VERSION = 1.3.0
#XDRIVER_XF86_VIDEO_ARMSOC_SITE = git://anongit.freedesktop.org/xorg/driver/xf86-video-armsoc
#XDRIVER_XF86_VIDEO_ARMSOC_VERSION = 13a46a857369cf3627cf6d4d6f04e5420341cde3
#XDRIVER_XF86_VIDEO_ARMSOC_SITE = $(call github,mihailescu2m,xf86-video-armsoc,$(XDRIVER_XF86_VIDEO_ARMSOC_VERSION))
XDRIVER_XF86_VIDEO_ARMSOC_VERSION = 5422_r5p1
XDRIVER_XF86_VIDEO_ARMSOC_SITE = $(call github,mdrjr,xf86-video-armsoc,$(XDRIVER_XF86_VIDEO_ARMSOC_VERSION))
XDRIVER_XF86_VIDEO_ARMSOC_AUTORECONF = YES
XDRIVER_XF86_VIDEO_ARMSOC_DEPENDENCIES = xserver_xorg-server xproto_fontsproto xproto_randrproto xproto_renderproto xproto_xextproto xproto_xproto
XDRIVER_XF86_VIDEO_ARMSOC_CONF_OPTS = --with-drmmode=exynos --enable-maintainer-mode

define XDRIVER_XF86_VIDEO_ARMSOC_AUTOGEN_HOOK
	mkdir -p $(@D)/m4
	mkdir -p $(@D)/config
	touch $(@D)/AUTHORS
endef

XDRIVER_XF86_VIDEO_ARMSOC_PRE_CONFIGURE_HOOKS += XDRIVER_XF86_VIDEO_ARMSOC_AUTOGEN_HOOK

$(eval $(autotools-package))






________________________

Edit Xorg configuration
________________________
###cd ~/xu3_mplayer/buildroot-2015.05
 $ nano -w system/skeleton/etc/X11/xorg.conf

Section     "Device"
   Identifier  "Mali-Fbdev"
   Driver      "armsoc"
   Option      "fbdev"        "/dev/fb0"
   Option      "Debug"        "false"
   Option      "DPMS"         "false"
EndSection

Section        "Screen"
   Identifier     "Default Screen"
   Device         "Mali-Fbdev"
   DefaultDepth   24
EndSection

Section      "ServerLayout"
   Identifier   "Default Layout"
   Option       "BlankTime"        "0"
   Option       "StandbyTime"      "0"
   Option       "SuspendTime"      "0"
   Option       "OffTime"          "0"
EndSection

Section      "Extensions"
   Option       "Composite"    "false"
EndSection

Section      "DRI"
   Mode         0666
EndSection





_________________________________

BuildRoot Menuconfig from scratch
_________________________________
###cd ~/xu3_mplayer/buildroot-2015.05
 $ sudo apt-get install ncurses-dev
 $ ls $HOME/xu3_mplayer/linaro-4.9/bin
 $ make menuconfig # enable buildroot configurations as shown:

   Target-options -> (ARM (little endian))
                     Target Architecture Variant (cortex-A7)
                     Target ABI (EABIhf)

   Build options  -> [*] Enable compiler cache

   Toolchain      -> Toolchain type (External toolchain)
                     Toolchain (Linaro ARM 2014.09)
                     Toolchain origin (Pre-installed toolchain)
                     ($(HOME)/xu3_mplayer/linaro-4.9) Toolchain path

                 ### IF you're not using Linaro release "2014.09", ie "2015.02", then set:
                 ### Toolchain (Custom toolchain)
                 ### (arm-linux-gnueabihf) Toolchain prefix
                 ### External toolchain kernel headers series (3.x.x)
                 ### External toolchain C library (glibc/eglibc)
                 ### [*] Toolchain has RPC support? (NEW)
                 ### [*] Toolchain has C++ support?

   System configur-> /dev management (Dynamic using eudev)
                 ### Use only one of these 'eth0' configurations, dynamic or static.
                 ### (eth0) Network interface to configure through DHCP
                 ### (support/scripts/config_eth) Custom scripts to run before creating filesystem images

   Target packages-> Graphic libs & apps -> [*] X.org -> Servers -> xorg-server
                                                                    X Window System server type (Modular X.org)
                                                                    [*] Enable AIGLX Extension 
                                                         Apps    -> [*] twm
                                                                    [*] xclock
                                                         Drivers -> [*] xf86-input-evdev
                                                                    [*] xf86-input-keyboard
                                                                    [*] xf86-input-mouse
                                                                    [*] xf86-video-armsoc
                                                                    [*] xf86-video-fbdev
                                                                ### [ ] xf86-video-vesa  ### vs armsoc
                                                         X proto -> [*] dri2proto

                                            [*] mesa3d -> [ ] Gallium swrast 
                                                          [*] DRI swrast driver
                                                          [*] OpenGL EGL
                                                          [*] OpenGL ES

                                            [*] mesa3d-demos #requires (AI)GLX/GLU/GLEW
                                            [*] xterm

                     Audio and video apps  -> [*] alsa-utils -> [*] speaker-test
                                              [*] ffmpeg
                                              [*] mplayer

                     Libraries -> Graphics -> [*] Libdrm
                                          ### DRM Drivers -> [*] exynos  ### TODO: get latest non-exp.
                                              [*] Libdri2
                                              [*] Libglew
                                              [*] Libglu
                                          ### [*] Wayland  ### Not currently used

                     Networking apps -> [*] openssh
                                        [*] rsync 

                     Interpreters & Scripts -> [*] python
                                               core python modules -> [*] bzip2 module
                                                                      [*] unicodedata module
                                                                      [*] zlib module
                                                                      [*] readline
                                                                      [*] xml module
                                                                      [*] ssl  
      save configuration

 $ make savedefconfig BR2_DEFCONFIG=configs/odroidxu3_mplayer_defconfig
###cp .config ../odroidxu3_mplayer_fullconfig





_________________________________________

Debug Monitor serial console instructions
_________________________________________
Connecting a desktop serial console/tty to the Odroid-XU3 Debug console

If the desktop hardware does not provide an RS232
interface you can use a USB-uart cable/adapter.
Ideally the module provided by Odroid is preferred:
http://www.hardkernel.com/main/products/prdt_info.php?g_code=G134111883934

 ? If you do not have an Odroid USB-uart module and you are good with
   hardware, use these instructions to connect RS232 to the Odroid-XU3.
   For pin locations ref. http://www.db9-pinout.com/
   and http://dn.odroid.com/homebackup/201407071202252748.jpg

      PC 9D-sub RS232 connector:
         1 not used
         2 RXD
         3 TXD
         4 DTR (6-12v use for pullup)
         5 GND
         6-9 not used

      Odroid debug console connector:
         1 VDD (1.8v use for pullup)
         2 TXD
         3 RXD
         4 GND

     PC to Odroid wiring use 4 resisters and 2 transisters 2N3904 (or eq.)
        Odroid-GND  connect to PC-GND and to emitter of both NPN transistors
        PC-RXD      connect to collector of NPN#1
        Odroid-RXD  connect to collector of NPN#2
        PC-TXD      connect thru 10 K ohm resister to base of NPN#2
        Odroid-TXD  connect thru 4.7K ohm resister to base of NPN#1
        PC-DTR      connect thru 10 K ohm resister to collector of NPN#1
        Odroid-VCC  connect thru 4.7K ohm resister to collector of NPN#2

 - With the host's serial port connected to the Odroid Debug console
   open a new terminal window for this console, and execute:
    $ dmesg | grep tty
      select the tty serial port for the Odroid-XU3 debug console
    $ DEBUG_TTY=/dev/ttyUSB0  # notice this is a USB-uart cable
    ? IF you're using minicom for a serial console
       $ sudo minicom -D $DEBUG_TTY -b 115200 -s
          - disable Hardware Flow Control :
            select "Serial port setup", "F", <enter>, "exit"
    ? OR you're using miniterm.py
       $ sudo miniterm.py --lf $DEBUG_TTY -b 115200

    - boot the Odroid then test the console
      Execute in the console terminal:
       > echo UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU







______________________________________

Patch u-boot / fastboot; no erase when flash partition
______________________________________
--- u-boot.old/common/cmd_fastboot.c	2015-05-21 19:47:31.723215096 -0600
+++ u-boot.new/common/cmd_fastboot.c	2015-05-28 18:24:03.478285880 -0600
@@ -590,7 +590,7 @@
 			free(nul_buf);
 #endif
 
-			if (bl_cnt>>10)
+			if (0)/*(bl_cnt>>10)*/
 			{
 				argv[2] = buffer;
 				argv[3] = device;






_________________________________________________________________________

Install System Remotely with Fastboot / Android tools (condensed version)
_________________________________________________________________________
Requires pre-installed bootloaders, fwbl1, bl2, u-boot.bin, and tzsw.
See instructions above, "Install bootloaders"
Requires pre-built Linux kernel and BuildRoot filesystem image.
See above "Build & Install BuildRoot" and "Build & Install the kernel"
###sudo apt-get install android-tools-fastboot android-tools-fsutils

 - Start fastboot on the odroid:
    - connect the OdroidXU3 to the development system with a microUSB cable
      and the Debug console cable. see Debug Monitor instructions above
    - Open a new terminal for the Debug console and execute miniterm.
       $ sudo miniterm.py --lf /dev/ttyUSB0 -b 115200
    - Continuing in the Debug Console terminal, insert microSD into OdroidXU3.
      Apply power and hold down the space bar, interrupting the bootloader.
    - At the bootloader prompt, "Exynos5422 #", enter "fdisk -p 0".
      These partition sizes will be needed later.
    - now enter "fastboot" and continue on the original desktop terminal

 ? IF you want to re-Flash the bootloader(s):
   Caution! if the installation of these bootloaders fails you will
   not be able to re-boot and use fastboot. If you feel the install
   is corrupt then do not reboot until install is successful.
   If you reboot with corrupt bootloaders you'll need to remove the
   microSD from the Odroid and use instructions above for Installing u-boot
    $ cd ~/xu3_mplayer/u-boot
    $ sudo fastboot flash fwbl1       sd_fuse/hardkernel/bl1.bin.hardkernel
    $ sudo fastboot flash bl2         sd_fuse/hardkernel/bl2.bin.hardkernel
    $ sudo fastboot flash bootloader  u-boot.bin
    $ sudo fastboot flash tzsw        sd_fuse/hardkernel/tzsw.bin.hardkernel

 - Flash Buildroot's root and boot partitions. Assuming they have been
   previously built using instructions above. You will also need to provide
   the partition sizes of the remote microSD.
   See the "fdisk -p 0" from above. Use block count * 512
    $ SIZEOF_DEV_SD1=$(expr   263168 \* 512) #=134742016   #
    $ SIZEOF_DEV_SD2=$(expr 30849024 \* 512) #=15794700288 # 16G microSD

 - Hardkernel boot image
    $ cd ~/xu3_mplayer/linux
    $ rm /tmp/VFS_BOOT.img
    $ dd if=/dev/zero of=/tmp/VFS_BOOT.img bs=1 count=0 seek=$SIZEOF_DEV_SD1 ; ls -alsh /tmp/VFS_BOOT.img
    $ mkfs.vfat /tmp/VFS_BOOT.img ; ls -alsh /tmp/VFS_BOOT.img
    $ fsck.vfat -fVv /tmp/VFS_BOOT.img # verify fat
    $ sudo mount -o loop /tmp/VFS_BOOT.img /mnt
    $ sudo cp arch/arm/boot/zImage /mnt ;sudo sync ; ls -alsh /tmp/VFS_BOOT.img
    $ sudo cp arch/arm/boot/dts/exynos5422-odroidxu3.dtb /mnt ;sudo sync ; ls -alsh /tmp/VFS_BOOT.img
    $ sudo wget $REPO_URL_PATH/boot.ini -O /mnt/boot.ini
    $ sudo umount /mnt ; ls -alsh /tmp/VFS_BOOT.img
    $ sudo fastboot flash fat /tmp/VFS_BOOT.img

 - Buildroot root image
    $ cd ~/xu3_mplayer/buildroot-2015.05
    $ rm /tmp/VFS_ROOT.img
    $ dd if=/dev/zero of=/tmp/VFS_ROOT.img bs=1 count=0 seek=$SIZEOF_DEV_SD2 ; ls -alsh /tmp/VFS_ROOT.img
    $ mkfs.ext4 -O ^has_journal /tmp/VFS_ROOT.img ; ls -alsh /tmp/VFS_ROOT.img
      Warning: Not a block special device. Proceed anyway? (y,n) y
    $ fsck.ext4 -fv /tmp/VFS_ROOT.img # verify ext4 no journal
    $ tune2fs -l /tmp/VFS_ROOT.img | grep features
    $ sudo mount -o loop /tmp/VFS_ROOT.img /mnt
    $ sudo tar -xvf output/images/rootfs.tar -C /mnt ; sudo sync ; ls -alsh /tmp/VFS_ROOT.img
    $ sudo make ARCH=arm CROSS_COMPILE=../linaro-4.9/bin/arm-linux-gnueabihf- INSTALL_MOD_PATH=/mnt -C ../linux modules_install
    $ sudo umount /mnt ; ls -alsh /tmp/VFS_ROOT.img
    $ img2simg /tmp/VFS_ROOT.img /tmp/VFS_ROOT.simg ; ls -alsh /tmp/VFS_ROOT.*
    $ sudo fastboot flash system /tmp/VFS_ROOT.simg

 $ sudo fastboot reboot

 ! DO NOT "fastboot flash" boot, kernel, ramdisk, userdata, or cache. These
   images are specific to Android and will over-write installed partitions.





________________________________________________

Cleaning Buildroot
________________________________________________
Buildroot may need cleaned and rebuilt if configurations are changed.
There are several different degrees of cleaning avalible, dependent on
what's been changed.

    * As an example, in the appended instructions, "Create ARMSOC xdriver"
      there are ways to clean individual packages "make <package>-dirclean",
      "make <package>-reinstall", then "make".
    * If you change the config_eth script and want to test a rebuild then
      all that is needed is "rm output/build/.root" then "make"
    * "make clean" will clean all packages requireing rebuild of everything
      on the next "make".
    * "make distclean" will clean all packages, reset the configuration,
      and remove all downloads. This is the cleanest of cleans, yet it
      will leave the system/skeleton entact.
    * Notice that some cleans may cause a download of newer packages
      introducing unexpected anomilies. One way to force a download
      of the latest package version is to remove the build and archive.
      rm -rf output/build/<package><version>
      rm dl/<package><version>.tar.gz





________________________________________________

Install pre-built libmali.so
________________________________________________
This appended instruction will be removed when proper config/build/install procedures
are created for the main instructions. It is provided now for convenience and testing.

 $ cd ~/xu3_mplayer

 $ wget http://malideveloper.arm.com/downloads/drivers/binary/r5p0-06rel0/mali-t62x_r5p0-06rel0_linux_1+x11.tar.gz
 $ mkdir mali-t62x_r5p0-06rel0_linux_1+x11
 $ tar -xvf mali-t62x_r5p0-06rel0_linux_1+x11.tar.gz -C mali-t62x_r5p0-06rel0_linux_1+x11

 $ cd buildroot-2015.05
 - Copy link and verify the libmali, libGL/ES/EGL libraries
    $ cp -a ../mali-t62x_r5p0-06rel0_linux_1+x11/x11/libmali.so system/skeleton/usr/lib/libmali_x11.so
    $ ln -s libmali_x11.so system/skeleton/usr/lib/libmali.so
    $ ln -s libmali.so system/skeleton/usr/lib/libGLESv2.so
    $ ln -s libmali.so system/skeleton/usr/lib/libGLESv2.so.2
    $ ln -s libmali.so system/skeleton/usr/lib/libGLESv1_CM.so
    $ ln -s libmali.so system/skeleton/usr/lib/libGLESv1_CM.so.1
    $ ln -s libmali.so system/skeleton/usr/lib/libEGL.so
    $ ln -s libmali.so system/skeleton/usr/lib/libEGL.so.1
    $ ln -s libmali.so system/skeleton/usr/lib/libOpenCL.so
    $ ln -s libmali.so system/skeleton/usr/lib/libOpenCL.so.1

 ? IF you need to list dynamically linked dependencies for executables and other libraries:
    - You can list target executables from the host using arm-linux-gnueabihf-objdump
       $ ../linaro-4.9/bin/arm-linux-gnueabihf-objdump -x system/skeleton/usr/lib/libmali.so | grep NEEDED
    - And you can download an "ldd" script to the Odroid's build
       $ REPO_URL_PATH="https://github.com/glscantlen/instructions/raw/master/Buildroot_XU3_MPlayer"
       $ sudo wget $REPO_URL_PATH/usr.bin.ldd -O system/skeleton/usr/bin/ldd

 $ rm output/build/.root 
 $ make
 - Now re-install the root image to the microSD
   or use fastboot from "- Buildroot root image" above

   ___________________________
 - Frame buffer version TBD
   ###wget http://malideveloper.arm.com/downloads/drivers/binary/r5p0-06rel0/mali-t62x_r5p0-06rel0_linux_1+fbdev.tar.gz
   ###mkdir mali-t62x_r5p0-06rel0_linux_1+fbdev
   ###tar -xvf mali-t62x_r5p0-06rel0_linux_1+fbdev.tar.gz -C mali-t62x_r5p0-06rel0_linux_1+fbdev
   ###cd buildroot-2015.05
   ###cp -a ../mali-t62x_r5p0-06rel0_linux_1+fbdev/fbdev/libmali.so system/skeleton/usr/lib/libmali_fbdev.so
   ###unlink system/skeleton/usr/lib/libmali.so
   ###ln -s libmali_fbdev.so system/skeleton/usr/lib/libmali.so








