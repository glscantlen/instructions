___________________________________________

Build a BuildRoot system for the Odroid-XU3.
___________________________________________
These procedures were written to be executed on an Ubuntu 14.04 x86 desktop.
There is no requirement to preform S/W development on the Odroid-XU3 itself.
The Odroid-XU3 will not require a previously installed system.
The BuildRoot system will be placed onto a microSD that will boot the Odroid-XU3
or the system can be transfered to the Odroid-XU3 remotely using Android fastboot.
For fastboot see appended instructions: "Debug Monitor serial console instructions".

 $ mkdir ~/xu3_mplayer
 $ cd ~/xu3_mplayer

   ___________________________________________
 - Retrive the latest copy of this instruction
    $ REPO_URL_PATH="https://github.com/glscantlen/instructions/raw/master/Buildroot_XU3_MPlayer"
    $ wget $REPO_URL_PATH/build_xu3_mplayer.ins -O ./build_xu3_mplayer_new.ins

   ___________________________________________
 - Disable Ubuntu's automount. Automount should be disabled for these instructions.
    $ gsettings set org.gnome.desktop.media-handling automount false
    ? IF after this installation you want to revert this configuration:
       $ gsettings set org.gnome.desktop.media-handling automount true


   ___________________________________________
 - Insert the microSD onto the desktop system and verify it's device path.
   The path name will be something like "/dev/sdX" or "/dev/mmcX"
   Replace "sdX" in the following instructions with correct device name for the microSD.
   !!! CAUTION !!! dd can destroy the contents of your mounted system disk.
   Make sure /dev/sdX is the correct device for the.
    $ sudo partprobe
    $ cat /proc/partitions
    $ DEV_SD=/dev/sdX  # !!! make sure this is your microSD
    $ sudo umount $DEV_SD? # un-mount any mounted microSD partitions


   ___________________________________________
 - Install the Development environment
    $ sudo apt-get install git ccache xz-utils #NA g++-arm-linux-gnueabihf p7zip-full 
    $ wget http://releases.linaro.org/15.02/components/toolchain/binaries/arm-linux-gnueabihf/gcc-linaro-4.9-2015.02-3-x86_64_arm-linux-gnueabihf.tar.xz
    $ tar -xvJf gcc-linaro-4.9-2015.02-3-x86_64_arm-linux-gnueabihf.tar.xz
    $ ln -s gcc-linaro-4.9-2015.02-3-x86_64_arm-linux-gnueabihf linaro-4.9
    $ export CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf-
    $ ls $CROSS_COMPILE*
    $ export ARCH=arm
    $ CPU_COUNT=$(grep processor /proc/cpuinfo | awk '{count=$NF};END{print count+1}')


   ______________________________________
 - Install bootloaders bl1, bl2, u-boot.bin, and tzsw
   ###DEV_SD=/dev/sdX  # !!! make sure this is your microSD
   ###cd ~/xu3_mplayer

    $ git clone https://github.com/hardkernel/u-boot.git -b odroidxu3-v2012.07
    $ cd u-boot

    ! Notice: There is no Pre-built u-boot.bin with a fastboot that supports this
      partitioning scheme. You must build and install a custom u-boot for fastboot.
      Also, bootloaders can be re-installed remotely with fastboot, if this u-boot
      is already installed and running on the odroid.
      See appended instructions below: "Install Buildroot Remotely".

    - wipe the front 100M of microSD and restore an msdos MBR
       $ sudo dd if=/dev/zero of=$DEV_SD bs=512 count=200000 conv=noerror,sync
       $ sudo parted $DEV_SD "mklabel msdos"
       ! Note: mklabel alone will erase the non-tabled-partitions (fused blobs)

    ? IF you want to install hardkernel's Pre-built bootloaders onto the microSD
      and you do NOT wish to use fastboot to remotely flash partitions then:
      ###chmod +x sd_fuse/hardkernel/sd_fusing.sh
       $ cd sd_fuse/hardkernel/
       $ sudo ./sd_fusing.sh $DEV_SD

    ? ELSE you can build and install a custom u-boot on the microSD
      and you may use fastboot to remotely flash partitions onto the Odroid:
      ###CPU_COUNT=$(grep processor /proc/cpuinfo | awk '{count=$NF};END{print count+1}')
      ###export CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf-

       ! Modify fastboot for faster flashing. Skip erasing the partitions.
       $ gedit common/cmd_fastboot.c # see appended "Patch u-boot" below.
         @ ~line 593 of cmd_fastboot.c modify as follows:
            if (0)/*(bl_cnt>>10)*/

       $ grep -E "Target|odroid" boards.cfg
       $ make odroid_config
       $ make -j$CPU_COUNT

       - Install u-boot to microSD in non-tabled-partitions and erase u-boot evironment
          $ sudo dd seek=1     of=$DEV_SD  if=sd_fuse/hardkernel/bl1.bin.hardkernel
          $ sudo dd seek=31    of=$DEV_SD  if=sd_fuse/hardkernel/bl2.bin.hardkernel
          $ sudo dd seek=63    of=$DEV_SD  if=u-boot.bin
          $ sudo dd seek=719   of=$DEV_SD  if=sd_fuse/hardkernel/tzsw.bin.hardkernel
         ###sudo dd seek=1231  of=$DEV_SD  if=/dev/zero count=32     conv=noerror,sync # zero out any environment

    $ sudo sync
    $ cd ~/xu3_mplayer


   __________________________________________
 - Prepare boot and root filesystems for kernel and Buildroot installation
   ###DEV_SD=/dev/sdX  # !!! make sure this is your microSD

    - Create boot and root partitions
      !!! CAUTION !!! dd can destroy the contents of your mounted system disk.
      Make sure DEV_SD is the correct device for the microSD.
       $ sudo parted $DEV_SD "mkpart primary fat32 1572864B 136314879B" # (I)gnore performance warning
       $ sudo parted $DEV_SD "mkpart primary ext4 136314880B -1"
       $ sudo parted $DEV_SD unit B print
         We will use these size reports later.
          $ SIZEOF_DEV_SD1=134742016  # this will match the fat32 partition size
          $ SIZEOF_DEV_SD2=____X____  # X=15794700288 for sandisk 16GB

    $ mkdir /tmp/ODROID_BOOT /tmp/ODROID_ROOT

    ? IF you are NOT going to use fastboot for remote installs
      then you will be installing directly onto a local microSD
       $ sudo mkfs.vfat $DEV_SD'1'
       $ sudo mkfs.ext4 -O ^has_journal -U e139ce78-9841-40fe-8823-96a304a09859 $DEV_SD'2'
       $ sudo sync
       $ sudo partprobe
       $ cat /proc/partitions
       $ sudo fsck.vfat -fv $DEV_SD'1' # verify fat
       $ sudo fsck.ext4 -fv $DEV_SD'2' # verify ext4 no journal
       $ sudo tune2fs -l $DEV_SD'2' | grep -E 'features|UUID'

       $ sudo mount -t vfat $DEV_SD'1' /tmp/ODROID_BOOT
       $ sudo mount -t ext4 $DEV_SD'2' /tmp/ODROID_ROOT

    ? ELSE you are going to use fastboot to remotly install a system.
      Create virtual file systems to hold boot and root for the remote install.
      The microSD partitioning is complete and it can be inserted into the Odroidxu3
       $ dd if=/dev/zero of=/tmp/VFS_BOOT.img bs=1 count=0 seek=$SIZEOF_DEV_SD1
       $ dd if=/dev/zero of=/tmp/VFS_ROOT.img bs=1 count=0 seek=$SIZEOF_DEV_SD2
       $ mkfs.vfat /tmp/VFS_BOOT.img
       $ mkfs.ext4 -O ^has_journal -U e139ce78-9841-40fe-8823-96a304a09859 /tmp/VFS_ROOT.img
         Warning: Not a block special device. Proceed anyway? (y,n) y
       $ fsck.vfat -fv /tmp/VFS_BOOT.img # verify fat
       $ fsck.ext4 -fv /tmp/VFS_ROOT.img # verify ext4 no journal and UUID
       $ tune2fs -l /tmp/VFS_ROOT.img | grep -E 'features|UUID'

       $ sudo mount -t vfat -o loop /tmp/VFS_BOOT.img /tmp/ODROID_BOOT
       $ sudo mount -t ext4 -o loop /tmp/VFS_ROOT.img /tmp/ODROID_ROOT


   _______________________________________________
 - Build and install the BuildRoot system
   ###REPO_URL_PATH="https://github.com/glscantlen/instructions/raw/master/Buildroot_XU3_MPlayer"
   ###CPU_COUNT=$(grep processor /proc/cpuinfo | awk '{count=$NF};END{print count+1}')
   ###sudo mount [ [$DEV_SD'2'] OR [-o loop /tmp/VFS_ROOT.img] ] /tmp/ODROID_ROOT
   ###cd ~/xu3_mplayer

    $ wget http://git.buildroot.net/buildroot/snapshot/buildroot-2015.05.tar.bz2
    $ tar -xvjf buildroot-2015.05.tar.bz2
    $ cd buildroot-2015.05

    $ make clean

    - Add "armsoc" video driver config/build to Buildroot's X11 (Kconfig)
       # insert a line for the armsoc package into the x11r7/Config.in
         armsoc is added to the "X11R7 Drivers" menu in alphabetic order.
       $ nano -w package/x11r7/Config.in
         ...
         <TAB><TAB>source package/x11r7/xdriver_xf86-video-ark/Config.in
         <TAB><TAB>source package/x11r7/xdriver_xf86-video-armsoc/Config.in
         <TAB><TAB>source package/x11r7/xdriver_xf86-video-ast/Config.in
         ...

       $ mkdir package/x11r7/xdriver_xf86-video-armsoc
       $ nano -w package/x11r7/xdriver_xf86-video-armsoc/Config.in
         config BR2_PACKAGE_XDRIVER_XF86_VIDEO_ARMSOC
         <TAB>bool "xf86-video-armsoc"
         <TAB>select BR2_PACKAGE_XPROTO_FONTSPROTO
         <TAB>select BR2_PACKAGE_XPROTO_RANDRPROTO
         <TAB>select BR2_PACKAGE_XPROTO_RENDERPROTO
         <TAB>select BR2_PACKAGE_XPROTO_XEXTPROTO
         <TAB>select BR2_PACKAGE_XPROTO_XPROTO
         <TAB>help
         <TAB>  Odroid XU3 video driver

       - Create a '.mk' file for download and build of the armsoc driver code
       ? Use the appended instructions below "Create ARMSOC xdriver_xf86-video-armsoc.mk"
       ? or copy the pre-written .mk file from "instructions/Buildroot_XU3_MPlayer"
         ###cp ~/instructions/Buildroot_XU3_MPlayer/xdriver_xf86-video-armsoc.mk package/x11r7/xdriver_xf86-video-armsoc/
          $ wget $REPO_URL_PATH/xdriver_xf86-video-armsoc.mk -O package/x11r7/xdriver_xf86-video-armsoc/xdriver_xf86-video-armsoc.mk

    ? IF you want to configure BuildRoot manully using "make menuconfig", use
      the appended instructions below "BuildRoot Menuconfig from scratch"
    ? ELSE you can copy the pre-made configuration from this repository folder.
      ###cp ~/instructions/Buildroot_XU3_MPlayer/odroidxu3_mplayer_defconfig configs/
       $ wget $REPO_URL_PATH/odroidxu3_mplayer_defconfig -O configs/odroidxu3_mplayer_defconfig
       $ ls $HOME/xu3_mplayer/linaro-4.9
       $ make odroidxu3_mplayer_defconfig

    - Install youtube-dl
    $ wget http://yt-dl.org/downloads/2015.06.25/youtube-dl -O system/skeleton/usr/bin/youtube-dl.py.zip
    $ chmod a+rx system/skeleton/usr/bin/youtube-dl.py.zip

    - configure #of ctrl-alt-F terminals
    $ nano -w system/skeleton/etc/inittab
      ...
      #add a few virtual consoles before the GENERIC_SERIAL
      tty1::respawn:/sbin/getty 38400 tty1
      tty2::respawn:/sbin/getty 38400 tty2
      ...

    - configure root mount to microSD partition #2
    $ nano -w system/skeleton/etc/fstab # change the root dev to actual
      #/dev/root      /               ext2    rw,noauto       0       1
      /dev/mmcblk0p2  /               ext4    rw,noauto       0       1
      ...

    - configure Xorg
    $ mkdir system/skeleton/etc/X11
    $ nano -w system/skeleton/etc/X11/xorg.conf
      Section     "Device"
       Identifier  "Mali-Fbdev"
       Driver      "armsoc"
       Option      "fbdev"        "/dev/fb0"
       Option      "Debug"        "false"
       Option      "DPMS"         "false"
      EndSection
      Section        "Screen"
       Identifier     "Default Screen"
       Device         "Mali-Fbdev"
       DefaultDepth   24
      EndSection
      Section      "ServerLayout"
       Identifier   "Default Layout"
       Option       "BlankTime"        "0"
       Option       "StandbyTime"      "0"
       Option       "SuspendTime"      "0"
       Option       "OffTime"          "0"
      EndSection
      Section      "DRI"
       Mode         0666
      EndSection

    $ nano -w support/scripts/config_eth
      echo "auto eth0" >> output/target/etc/network/interfaces
      echo "iface eth0 inet dhcp" >> output/target/etc/network/interfaces
    $ chmod +x support/scripts/config_eth

    - build and install the root file system
    $ make -j$CPU_COUNT
    $ sudo tar -xvf output/images/rootfs.tar -C /tmp/ODROID_ROOT


    $ sudo sync
    $ cd ~/xu3_mplayer


   __________________________________
 - BUILD & INSTALL A NEW KERNEL
   ###CPU_COUNT=$(grep processor /proc/cpuinfo | awk '{count=$NF};END{print count+1}')
   ###export ARCH=arm
   ###export CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf-
   ###sudo mount [ [$DEV_SD'1'] OR [-o loop /tmp/VFS_BOOT.img] ] /tmp/ODROID_BOOT
   ###sudo mount [ [$DEV_SD'2'] OR [-o loop /tmp/VFS_ROOT.img] ] /tmp/ODROID_ROOT
   ###cd ~/xu3_mplayer

    - GIT the kernel source and build
      ###git clone --depth 1 https://github.com/hardkernel/linux.git -b odroidxu3-3.10.y
       $ git clone --single-branch https://github.com/hardkernel/linux.git -b odroidxu3-3.10.y
       $ cd linux

       $ make odroidxu3_defconfig
       $ make -j$CPU_COUNT zImage
       $ make -j$CPU_COUNT modules
       $ make dtbs
       $ KRELEASE=$(make kernelrelease)

    - Copy the kernel, modules, firmware, and boot.ini to the boot filesystem. Initrd is not used.
       $ sudo cp arch/arm/boot/zImage /tmp/ODROID_BOOT/
       $ sudo cp arch/arm/boot/dts/exynos5422-odroidxu3.dtb /tmp/ODROID_BOOT/
       $ sudo make ARCH=arm CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf- INSTALL_MOD_PATH=/tmp/ODROID_ROOT modules_install
       $ sudo nano -w /tmp/ODROID_BOOT/boot.ini
         ODROIDXU-UBOOT-CONFIG
         setenv bootdelay "10"
         setenv fdt_high "0xffffffff"
         setenv smsmacaddr "smsc95xx.macaddr=00:1e:06:61:7a:39"
         setenv bootrootfs "console=tty1 console=ttySAC2,115200n8 root=UUID=e139ce78-9841-40fe-8823-96a304a09859 rootwait ro"
         setenv bootcmd "fatload mmc 0:1 0x40008000 zImage; fatload mmc 0:1 0x42000000 exynos5422-odroidxu3.dtb; bootz 0x40008000 - 0x42000000"
         setenv mmcrootdev "root=/dev/mmcblk0p2 rw"
         setenv mmcrootfstype "rootfstype=ext4 rootwait"
         setenv videoconfig "drm_kms_helper.edid_firmware=edid/1920x1080.bin"
         #setenv debugdrivers "s5p_mfc.debug=10"
         setenv bootargs "${bootrootfs} ${videoconfig} ${smsmacaddr} ${mmcrootdev} ${mmcrootfstype} ${debugdrivers}"
         boot


    $ sudo sync
    $ cd ~/xu3_mplayer


   _______________________________________________
 - Remote install, cleanup & test
   ###cd ~/xu3_mplayer
    $ sudo umount /tmp/ODROID_?OOT 

    ? IF you are NOT remotely installing Buildroot then you have completed the
      installation of Buildroot onto a local microSD. You can boot the Odroid-XU3
      with this microSD and login as root.

    ? ELSE you are installing Buildroot remotely with fastboot
      ###sudo apt-get install android-tools-fastboot android-tools-fsutils
       - Start fastboot on the odroid:
         If Buildroot or Ubuntu is already installed you may need a bootdelay as in
         the boot.ini above, then interupt the bootloader before the kernal loads.
          - connect the OdroidXU3 to the development system with
            a microUSB cable and the Debug console cable
          - Open a new terminal for the Debug console and execute miniterm.
             $ miniterm.py --lf /dev/ttyUSB0 -b 115200
          - Continuing in the Debug Console terminal, insert microSD into OdroidXU3.
            Apply power and hold down the space bar, interupting the bootloader.
          - At the bootloader prompt, "Exynos5422 #", enter "fastboot"
          ! Now continue on the original desktop terminal

       - convert filesystem to sparse image and install remotely
          $ img2simg /tmp/VFS_ROOT.img /tmp/VFS_ROOT.simg ; ls -alsh /tmp/VFS_ROOT*
          $ fastboot flash fat /tmp/VFS_BOOT.img
          $ fastboot flash system /tmp/VFS_ROOT.simg
          $ fastboot reboot

    ! NOTICE: under some conditions the Odroid will need startup with the POWER button.

    - Login to the Odroid-XU3 as root, no password
      Execute the following(>) on the Odroid: 
       > ping www.comcast.net
       > speaker-test
       > mplayer http://stream-tx1.radioparadise.com/mp3-128
       > mplayer -cache 1024 -playlist http://somafm.com/groovesalad130.pls

       > export DISPLAY=:0.0 ; Xorg & sleep 1 ; twm &
       - using the mouse press and hold the left button then select "Xterm"
         now continue in the Xterm window
       > glxgears
       > es2gears_x11

       ! HINT: you can open a second Xtrem window, display this document, and use copy/paste
          > ssh <USER>@<IPADDR>
          > cat instructions/Buildroot_XU3_MPlayer/build_xu3_mplayer.ins
          - use shift-insert to paste selected text into the first Xterm window.

       > wget http://samples.mplayerhq.hu/3D/DSCF1928_fish.AVI
       > wget http://samples.mplayerhq.hu/MPEG-4/video.mp4
       > mplayer DSCF1928_fish.AVI
       > mplayer video.mp4

       > mplayer -cache 8192 http://docs.gstreamer.com/media/sintel_trailer-480p.webm
       > url="http://www.youtube.com/watch?v=gr-mt1P94cQ"
       > youtube-dl.py.zip --no-check-certificate -q -o- $url | mplayer -cache 8192  -
       > url="https://www.youtube.com/watch?v=vJpge3v0DO4"
       > youtube-dl.py.zip --no-check-certificate -q -o- $url | mplayer -fs -cache 16384  -

    - To shutdow the odroid ctrl-alt-F1
      ###kill -TERM $(ps aux | grep Xorg | grep -v grep | awk '{print $1}')
       > killall -TERM Xorg
       > poweroff






___________________________________________________

    Create ARMSOC xdriver_xf86-video-armsoc.mk
___________________________________________________
Thanks to Legath on the Odroid forum for help with this .mk and thanks to mihailescu2m
for providing the fastest armsoc driver I've tested, comparing glxgears framerate.
Other libs & drivers for es2gears_x11/wayland still need config/built/installed/tested.
###cd ~/xu3_mplayer/buildroot-2015.05

 ! NOTICE: several versions of this driver code are currently being developed.
   included in this '.mk' are a couple that can be de/selected using the comment (#).
    ? If you change the driver on a re-build you should remove the old driver code.
       $ rm -rf output/build/xdriver_xf86-video-armsoc-1.0.0
       $ rm dl/xdriver_xf86-video-armsoc-1.0.0.tar.gz
         OR
       $ make xdriver_xf86-video-armsoc-dirclean
         AND to re-install
       $ make xdriver_xf86-video-armsoc-reinstall
       $ ls -als output/target/usr/lib/xorg/modules/drivers
         Need make to re-create the tar
       $ ls -als output/images
       $ make -j4

       $ nano -w package/x11r7/xdriver_xf86-video-armsoc/xdriver_xf86-video-armsoc.mk
       # Copy/Paste the following  as-is, keeping the tabs.

################################################################################
#
# xdriver_xf86-video-armsoc
#
################################################################################

XDRIVER_XF86_VIDEO_ARMSOC_VERSION = 13a46a857369cf3627cf6d4d6f04e5420341cde3
XDRIVER_XF86_VIDEO_ARMSOC_SITE = $(call github,mihailescu2m,xf86-video-armsoc,$(XDRIVER_XF86_VIDEO_ARMSOC_VERSION))
#XDRIVER_XF86_VIDEO_ARMSOC_VERSION = 1.0.0
#XDRIVER_XF86_VIDEO_ARMSOC_SITE = $(call github,endlessm,xf86-video-armsoc,$(XDRIVER_XF86_VIDEO_ARMSOC_VERSION))
#XDRIVER_XF86_VIDEO_ARMSOC_VERSION = 1.3.0
#XDRIVER_XF86_VIDEO_ARMSOC_SITE = git://anongit.freedesktop.org/xorg/driver/xf86-video-armsoc
XDRIVER_XF86_VIDEO_ARMSOC_AUTORECONF = YES
XDRIVER_XF86_VIDEO_ARMSOC_DEPENDENCIES = xserver_xorg-server xproto_fontsproto xproto_randrproto xproto_renderproto xproto_xextproto xproto_xproto
XDRIVER_XF86_VIDEO_ARMSOC_CONF_OPTS = --with-drmmode=exynos --enable-maintainer-mode

define M4MKDIR_HOOK
	-mkdir $(@D)/m4;
endef
XDRIVER_XF86_VIDEO_ARMSOC_PRE_CONFIGURE_HOOKS += M4MKDIR_HOOK

define XDRIVER_XF86_VIDEO_ARMSOC_AUTOGEN_HOOK
	mkdir -p $(@D)/config
	touch $(@D)/AUTHORS
endef
XDRIVER_XF86_VIDEO_ARMSOC_PRE_CONFIGURE_HOOKS += XDRIVER_XF86_VIDEO_ARMSOC_AUTOGEN_HOOK

$(eval $(autotools-package))






_________________________________

BuildRoot Menuconfig from scratch
_________________________________
###cd ~/xu3_mplayer/buildroot-2015.05
 $ sudo apt-get install ncurses-dev
 $ ls $HOME/xu3_mplayer/linaro-4.9
 $ make menuconfig # enable buildroot configurations as shown:

   Target-options -> (ARM (little endian))
                     Target Architecture Variant (cortex-A7)
                     Target ABI (EABIhf)

   Build options  -> [*] Enable compiler cache

   Toolchain      -> Toolchain type (External toolchain)
                     Toolchain (Custom toolchain)
                     Toolchain origin (Pre-installed toolchain)
                     ($(HOME)/xu3_mplayer/linaro-4.9) Toolchain path
                     (arm-linux-gnueabihf) Toolchain prefix
                     External toolchain kernel headers series (3.17.x)
                     External toolchain C library (glibc/eglibc)
                     [*] Toolchain has RPC support? (NEW)
                     [*] Toolchain has C++ support?

   System configur-> /dev management (Dynamic using eudev)
                     (support/scripts/config_eth) Custom scripts to run before creating filesystem images

   Target packages-> Graphic libs & apps -> [*] X.org -> Servers -> xorg-server
                                                                    X Window System server type (Modular X.org)
                                                                    [*] Enable AIGLX Extension 
                                                         Apps    -> [*] twm
                                                                    [*] xclock
                                                         Drivers -> [*] xf86-input-evdev
                                                                    [*] xf86-input-keyboard
                                                                    [*] xf86-input-mouse
                                                                    [*] xf86-video-armsoc
                                                                    [*] xf86-video-fbdev
                                                              ##### [ ] xf86-video-vesa
                                                         protocl -> [*] dri2proto

                                            [*] mesa3d -> [ ] Gallium swrast 
                                                          [*] DRI swrast driver
                                                    ##### [*] OpenGL EGL
                                                          [*] OpenGL ES

                                            [*] mesa3d-demos #requires (AI)GLX/GLU/GLEW
                                            [*] xterm

                     Libraries -> Graphics -> [*] Libdrm
                                        ##### DRM Drivers -> [*] exynos (get latest non-exp)
                                              [*] Libdri2
                                              [*] Libglew
                                              [*] Libglu
                                        ##### [*] Wayland

                     Audio and video apps  -> [*] alsa-utils -> [*] speaker-test
                                              [*] ffmpeg
                                              [*] mplayer

                     Networking apps -> [*] openssh
                                        [*] rsync 

                     Interpreters & Scripts -> [*] python
                                               core python modules -> [*] bzip2 module
                                                                      [*] unicodedata module
                                                                      [*] zlib module
                                                                      [*] readline
                                                                      [*] xml module
                                                                      [*] ssl  
      save configuration

 $ make savedefconfig BR2_DEFCONFIG=configs/odroidxu3_mplayer_defconfig
###cp .config ../odroidxu3_mplayer_fullconfig





_________________________________________

Debug Monitor serial console instructions
_________________________________________
Connecting a desktop serial console/tty to the Odroid-XU3 Debug console

If the desktop hardware does not provide an RS232
interface you can use a USB-uart cable/adaptor.
Ideally the module provided by Odroid is prefered:
http://www.hardkernel.com/main/products/prdt_info.php?g_code=G134111883934

 ? If you do not have an Odroid USB-uart module and you are good with
   hardware, use these instructions to connect RS232 to the Odroid-XU3.
   For pin locations ref. http://www.db9-pinout.com/
   and http://dn.odroid.com/homebackup/201407071202252748.jpg

      PC 9D-sub RS232 connector:
         1 not used
         2 RXD
         3 TXD
         4 DTR (6-12v use for pullup)
         5 GND
         6-9 not used

      Odroid debug console connector:
         1 VDD (1.8v use for pullup)
         2 TXD
         3 RXD
         4 GND

     PC to Odroid wiring use 4 resisters and 2 transisters 2N3904 (or eq.)
        Odroid-GND  connect to PC-GND and to emitter of both NPN transistors
        PC-RXD      connect to collector of NPN#1
        Odroid-RXD  connect to collector of NPN#2
        PC-TXD      connect thru 10 K ohm resister to base of NPN#2
        Odroid-TXD  connect thru 4.7K ohm resister to base of NPN#1
        PC-DTR      connect thru 10 K ohm resister to collector of NPN#1
        Odroid-VCC  connect thru 4.7K ohm resister to collector of NPN#2

 - With the host's serial port connected to the Odroid Debug console
   open a new terminal window for this console, and execute:
    $ dmesg | grep tty
      select the tty serial port for the Odroid-XU3 debug console
    $ DEBUG_TTY=/dev/ttyUSB0  # notice this is a USB-uart cable
    ? IF you're using minicom for a serial console
       $ sudo minicom -D $DEBUG_TTY -b 115200 -s
          - disable Hardware Flow Control :
            select "Serial port setup", "F", <enter>, "exit"
    ? OR you're using miniterm.py
       $ sudo miniterm.py --lf $DEBUG_TTY -b 115200

    - boot the Odroid then test the console
      Execute in the console terminal:
       > echo UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU





______________________________________

Patch u-boot / fastboot; no erase when flash partition
______________________________________
--- u-boot.old/common/cmd_fastboot.c	2015-05-21 19:47:31.723215096 -0600
+++ u-boot.new/common/cmd_fastboot.c	2015-05-28 18:24:03.478285880 -0600
@@ -590,7 +590,7 @@
 			free(nul_buf);
 #endif
 
-			if (bl_cnt>>10)
+			if (0)/*(bl_cnt>>10)*/
 			{
 				argv[2] = buffer;
 				argv[3] = device;







________________________________________________

Install Buildroot Remotely with Fastboot / Android tools (condensed version)
________________________________________________
Requires Odroid bootloader and Samsung firmware load, fwbl1 / bl2
See instructions above for Installing u-boot and Partitioning microSD.
To speed up fastboot's flash apply "Patch u-boot" below to skip the partition erase.
###sudo apt-get install android-tools-fastboot android-tools-fsutils

 - Start fastboot on the odroid:
    - connect the OdroidXU3 to the development system with a microUSB cable
      and the Debug console cable. see Debug Monitor instructions above
    - Open a new terminal for the Debug console and execute miniterm.
       $ sudo miniterm.py --lf /dev/ttyUSB0 -b 115200
    - Continuing in the Debug Console terminal, insert microSD into OdroidXU3.
      Apply power and hold down the space bar, interrupting the bootloader.
    - At the bootloader prompt, "Exynos5422 #", enter "fdisk -p 0". These
      partition sizes will be needed later. (fastboot getvar all: not suported)
    - now enter "fastboot" and continue on the original desktop terminal

 ? IF you want to re-Flash the bootloader(s):
   Caution! if the installation of these bootloaders fails you will
   not be able to re-boot and use fastboot. If you feel the install
   is corrupt then do not reboot until install is successful.
   If you reboot with corrupt bootloaders you'll need to remove the
   microSD from the Odroid and use instructions above for Installing u-boot
    $ cd ~/xu3_mplayer/u-boot
    $ fastboot flash fwbl1       sd_fuse/hardkernel/bl1.bin.hardkernel
    $ fastboot flash bl2         sd_fuse/hardkernel/bl2.bin.hardkernel
    $ fastboot flash bootloader  u-boot.bin
    $ fastboot flash tzsw        sd_fuse/hardkernel/tzsw.bin.hardkernel

 - Flash Buildroot's root and boot partitions. Assuming they have been
   previously built using instructions above. You will also need to provide
   the partition sizes of the remote microSD.
   See the "fdisk -p 0" from above. Use block count * 512
    $ SIZEOF_DEV_SD1=$(expr   263168 \* 512)#=134742016   #
    $ SIZEOF_DEV_SD2=$(expr 30849024 \* 512)#=15794700288 # 16G microSD

 - Buildroot boot image
    $ rm /tmp/VFS_BOOT.img
    $ dd if=/dev/zero of=/tmp/VFS_BOOT.img bs=1 count=0 seek=$SIZEOF_DEV_SD1 ; ls -alsh /tmp/VFS_BOOT.img
    $ mkfs.vfat /tmp/VFS_BOOT.img ; ls -alsh /tmp/VFS_BOOT.img
    $ fsck.vfat -fVv /tmp/VFS_BOOT.img # verify fat
    $ sudo mount -o loop /tmp/VFS_BOOT.img /mnt
    $ cd ~/xu3_mplayer/linux
    $ KVERSION=$(grep -a "Linux version" vmlinux | awk -F " " '{ print $3 }')
    $ echo "Installing kernel release "$KVERSION
    $ sudo cp arch/arm/boot/zImage /mnt ;sudo sync ; ls -alsh /tmp/VFS_BOOT.img
    $ sudo cp arch/arm/boot/dts/exynos5422-odroidxu3.dtb /mnt ;sudo sync ; ls -alsh /tmp/VFS_BOOT.img
    $ sudo nano -w /mnt/boot.ini ; ls -alsh /tmp/VFS_BOOT.img
      verify/copy the boot.ini from above
    $ sudo umount /mnt ; ls -alsh /tmp/VFS_BOOT.img
    $ fastboot flash fat /tmp/VFS_BOOT.img

 - Buildroot root image
    $ rm /tmp/VFS_ROOT.img
    $ dd if=/dev/zero of=/tmp/VFS_ROOT.img bs=1 count=0 seek=$SIZEOF_DEV_SD2 ; ls -alsh /tmp/VFS_ROOT.img
    $ mkfs.ext4 -O ^has_journal -U e139ce78-9841-40fe-8823-96a304a09859 /tmp/VFS_ROOT.img ; ls -alsh /tmp/VFS_ROOT.img
      Warning: Not a block special device. Proceed anyway? (y,n) y
    $ fsck.ext4 -fv /tmp/VFS_ROOT.img # verify ext4 no journal and UUID
    $ tune2fs -l /tmp/VFS_ROOT.img | grep -E 'features|UUID'
    $ sudo mount -o loop /tmp/VFS_ROOT.img /mnt
    $ cd ~/xu3_mplayer/buildroot-2015.05
    $ sudo tar -xvf output/images/rootfs.tar -C /mnt ; sudo sync ; ls -alsh /tmp/VFS_ROOT.img
    $ cd ~/xu3_mplayer/linux
    $ sudo make ARCH=arm CROSS_COMPILE=~/xu3_mplayer/linaro-4.9/bin/arm-linux-gnueabihf- INSTALL_MOD_PATH=/mnt modules_install
    $ sudo umount /mnt ; ls -alsh /tmp/VFS_ROOT.img
    $ cd ~/xu3_mplayer
    $ img2simg /tmp/VFS_ROOT.img /tmp/VFS_ROOT.simg ; ls -alsh /tmp/VFS_ROOT.*
    $ fastboot flash system /tmp/VFS_ROOT.simg

 $ fastboot reboot
 ! DO NOT "fastboot flash" boot, kernel, ramdisk, userdata, or cache. These
   images are specific to Android and may over-write Buildroot partitions.






