________________________________________________________________
These procedures use a ATmega328p to replace a faulty, discontinued,
controller IC on an old Genie garage door opener. The procedures 
were executed on an Ubuntu 14.04 desktop system and use an Arduino
UNO to develop and test the initial software. Also in these
procedures the software can be uploaded to a standalone ATmega328p
that is installed in the Genie opener. You will need at a minimum one
Arduino UNO or an Arduino-Micro/YUN with a stand-alone ATmega328P.
Other hardware information is in the "README" file in this folder.


 - Connect Ubuntu host USB to the Arduino USB device
 $ lsusb | grep -i arduino # Note the VID:PID for following rules
 $ dmesg | grep ttyACM     # Note Arduino USB-uart = /dev/ttyACM*
 ! Notice, if you have multiple Arduino devices connected to the
   Ubuntu host then "/dev/ttyACM0" in following avrdude commands
   may need to be changed.


 # Add normal user access to the Arduino USB device
 $ sudo nano -w /lib/udev/rules.d/70-arduino-usb.rules 
   KERNEL=="ttyACM*", MODE="0666"
   ACTION=="add|change", SUBSYSTEM=="usb"
   ATTRS{idVendor}=="2341", ATTRS{idProduct}=="8041|8037|0043"
   TAG+="uaccess"
 $ sudo udevadm control --reload-rules
 $ sudo udevadm trigger


 # install the source code, AVR compiler tools and utilities for
   building and uploading "opener" to an Arduino/AVR device.
 $ sudo apt-get install avrdude gcc-avr avr-libc subversion
 $ svn export https://github.com/glscantlen/instructions/trunk/arduino_uno_garage_door_opener/opener ~/garage_door_opener
 $ cd ~/garage_door_opener/

   __________________________________________
 ? IF you want to upload the microcode to an Arduino UNO:
   Initially, for testing, I used an UNO with jumpers to the Genie
   garage door opener. The I/O connections to the Genie controller
   circuit is defined with a schematic, "intrcnct_schem.jpg". The
   following steps will upload the micro-code "opener.hex" to
   the UNO via it's USB.
    - Connect the Ubuntu host USB to the UNO USB device.
    ! Notice, the "opener" microcode is built by default for an
      internal 8MHz clock. If it is run on a 16MHz UNO the opener
      functions will run 2x faster then normal.
    ? IF you want to rebuild the opener microcode for a 16MHz UNO:
       $ make clean
       $ make AVR_FREQ=16000000L eeprom
    $ avrdude -p atmega328p -c arduino -P /dev/ttyACM0 -b 115200 -D -U flash:w:opener.hex:i

   __________________________________________
 ? ELSE you'll need an ISP programmer to upload to a stand-alone
   ATmega328p. This instruction uses an Arduino YUN as an ISP
   programmer running "yun_isp.hex" microcode. Yun_isp emulates
   an ISP programmer using Arduino hardware. It's default build
   is for the Arduino YUN. The origin for yun_isp can be found in
   the Arduino SDK, "examples/11.ArduinoISP". A modification was
   made to this source that changes the ISP-reset to an available
   I/O pin on the YUN, I/O-10. Beware, "yun_isp.hex" has only been
   tested on the Arduino-Micro & Yun hardware. There is an appended
   instruction that exemplifies how to rebuild yun_isp, specifically
   for the Ardino-Micro.

    # Load "yun_isp.hex", the ISP emulator, onto a YUN/Micro
    - Connect the Ubuntu host USB to the YUN USB device.
    $ /bin/stty -F /dev/ttyACM0 1200 ; sleep 1 ; avrdude -p atmega32u4 -c avr109 -P /dev/ttyACM0 -b 57600 -D -U flash:w:yun_isp.hex:i

    # A custom ISP cable was built that connects the YUN's ICSP
      header to the ICSP of other Arduino/AVR devices. This cable
      will break-out the 'reset' signal to a movable I/O pin. As
      mentioned, yun_isp.hex currently uses I/O-10 for this reset.
      See breakout_cable.jpg. Note the white wire at each end of
      this cable connects to pin 1 of the ICSP header.

    # A circuit board was built and installed on the Genie garage
      door opener. See board_mod.JPG and cntrl_schem.jpg. This
      board holds the standalone ATmega328p and interface components
      including a 6 pin header to connect the ISP program cable.
      See intrcnct_schem.jpg and yun2ctrl.jpg.
    - Connect the break-out end of the ISP program cable to the
      YUN. Connect the break-out wire to the YUN's I/O-10. Connect
      the remaining end of the program cable to the added circuit
      board. Leave the USB cable connected as described above.
      Note on the schematic, a jumper to VCC can be used to power
      the board from the ISP cable.

    # The "opener.hex" microcode is now loaded onto the ATmega328p
      to function as a garage door opener.
    $ avrdude -p atmega328p -c stk500v1 -P /dev/ttyACM0 -b 19200 -U flash:w:opener.hex:i 
    ? IF you want to rebuild and upload the opener microcode:
       $ make clean
       $ make upload


_____________________
APPENDED INSTRUCTIONS

 ! NOTICE: IF the ATmega328p, to be used on the added circuit
   board, was originally for an Arduino board then it will need
   a NON-Crystal bootloader flash. I originally used the
   ATmega328p that was on the UNO board. BUT! before I removed it
   from the UNO board I had to flash the bootloader for an
   internal 8MHz clock. The following instructions will flash
   this bootloader onto the UNO.
    - Connect the Ubuntu host USB to the YUN USB device.
    - Connect the break-out end of the ISP program cable to the
      YUN. Connect the break-out wire to the YUN's I/O-10. Connect
      the remaining end of the program cable to the UNO ICSP header.
      See yun2uno.JPG
    $ avrdude -p atmega328p -c stk500v1 -P /dev/ttyACM0 -b 19200 -e -U lock:w:0x3F:m -U efuse:w:0x05:m -U hfuse:w:0xDA:m -U lfuse:w:0xE2:m 
    ! The UNO board will no longer function with Arduino software!
    ? IF you want to revert the bootloader back to it's original:
       $ wget https://github.com/arduino/Arduino/raw/master/hardware/arduino/avr/bootloaders/optiboot/optiboot_atmega328.hex
       $ avrdude -p atmega328p -c stk500v1 -P /dev/ttyACM0 -b 19200 -e -U lock:w:0x3F:m -U efuse:w:0x05:m -U hfuse:w:0xDE:m -U lfuse:w:0xFF:m 
       $ avrdude -p atmega328p -c stk500v1 -P /dev/ttyACM0 -b 19200 -U flash:w:optiboot_atmega328.hex:i -U lock:w:0x0F:m


 ? IF you want to build the "yun_isp.hex" from source use the
   following commands. These steps will build microcode to run on
   an Arduino-Micro, CORE_DEV=ARDUINO_AVR_MICRO. The yun_isp.cpp
   source is included in the same folder with the "opener.cpp".
    - Connect the Ubuntu host USB to the Ardino USB device.
    $ make BASENAME=yun_isp clean
    $ make BASENAME=yun_isp CORE_DEV=ARDUINO_AVR_MICRO AVR_PROG=avr109 PROGBAUD=57600 upload
    ! If the YUN "programmer is not responding" you may need to
      reset the USB. Double-click the 32U4-RST button, then re-run
      the avrdude command within the 10 sec. upload timeout. There
      is a 'throbbing' LED to indicate waiting for upload.
       $ avrdude -p atmega32u4 -c avr109 -P /dev/ttyACM0 -b 57600 -D -U flash:w:yun_isp.hex:i






